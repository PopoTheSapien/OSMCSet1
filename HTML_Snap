# This piece of code is designed to attempt opening a VNC connection and taking a snapshot of each instance.

import sys
import os
import shutil
import subprocess
import time
from subprocess import PIPE


# =================================================================================================================
# Constants
# =================================================================================================================

#scanfile = os.sep + os.path.join('home', 'pi', 'Pen', 'Scripts', 'Masscan', 'Results', 'Scan_ISP_VNC.txt')
debug = 1
port = '5900'
#web = False

# =================================================================================================================
# Add some colour to the output
# =================================================================================================================


def printcolour(stringput, colour):
    if colour == 'gr':
        print("\033[1;30m%s\033[1;m" %stringput)
    if colour == 'r':
        print("\033[1;31m%s\033[1;m" %stringput)
    if colour == 'g':
        print("\033[1;32m%s\033[1;m" %stringput)
    if colour == 'y':
        print("\033[1;33m%s\033[1;m" %stringput)
    if colour == 'b':
        print("\033[1;34m%s\033[1;m" %stringput)
    if colour == 'm':
        print("\033[1;35m%s\033[1;m" %stringput)
    if colour == 'cy':
        print("\033[1;36m%s\033[1;m" %stringput)
    if colour == 'w':
        print("\033[1;37m%s\033[1;m" %stringput)
    if colour == 'cr':
        print("\033[1;38m%s\033[1;m" %stringput)


# ========================================================================================================================
def directorycreator(path):

    dirlist = []
    d = 0
    pathstring = str(path) + os.sep

    while not(os.path.exists(path) and not(d >= 30)):

        pathstring = pathstring[:pathstring.rfind(os.sep)]

        if pathstring.find(os.sep) < 0:
            pathstring += os.sep

        if os.path.exists(pathstring):
            os.mkdir(dirlist.pop())

        else:
            dirlist.append(pathstring)
            d += 1
    return os.path.exists(path)



# =======================================================================================================================
def GetIP(row):

    first = row.find(port) + port.__len__() + 1
    second = row.find(' ', row.find(port) + port.__len__() + 1)
    length = second - first
    #printcolour(first.__str__() + ' ' + second.__str__(), 'w')
    return row[first:first + length]


# ======================================================================================================================
def vnc():

    out = ''
    err = ''

    outputdir = "/home/pi/Pen" + scanfile[scanfile.rfind(os.sep): scanfile.rfind('.txt')]
    directorycreator(outputdir)

    printcolour('Sending captures to: ' + outputdir, 'cr') 

    file = open(scanfile, 'r')

    ip = GetIP(file.readline())
    ip = GetIP(file.readline())

    while ip != '':

        printcolour(ip, 'cy')
        revisit = 0

        # Take a snappy
        # --------------------------------------------------------------------------------------------------------------

        snapexecpath = 'timeout 3 vncsnapshot ' + ip + ' ' + outputdir + os.sep +  ip + '.jpeg'

        if debug == 1:
            printcolour(snapexecpath, 'cy')

        try:
            takesnap = subprocess.Popen([snapexecpath], shell=True, stderr=PIPE, stdout=PIPE, bufsize=1)
        except:
            printcolour('Done Reading: ' + ip, 'r')

        out = ''
        err = ''
        (out, err) = takesnap.communicate()
        if err != '':
            printcolour(err, 'r')
        if out != '':
            printcolour(out, 'y')

        if err.find('No authentication needed') != -1:
            printcolour('Hmmmmm....', 'y')
            revisit = 1

        takesnap.wait()

        if revisit == 1:
            printcolour('Taking closer look....', 'y')
            snapexecpath = 'timeout 120 vncsnapshot -debug ' + ip + ' /home/pi/Pen/VNCScreens/' + ip + '.jpeg'
            try:
                takesnap = subprocess.Popen([snapexecpath], shell=True, stderr=PIPE, stdout=PIPE, bufsize=1)
            except:
                printcolour('Error Occurred', 'r')

        takesnap.wait()
        
        execline = 'echo "' + ip + '" >> ' + outputdir + '/Progress.txt'
        bookmark = subprocess.Popen([execline], shell=True, stdout=PIPE, stderr=PIPE)

        ip = GetIP(file.readline())
        
    printcolour("No IP Found in the line, turning off..", 'r')

    file.close()


# ======================================================================================================================
def webber():

    printcolour('Scanning web, Port: ' + port, 'cy')
    file = open(scanfile, 'r')

    ip = GetIP(file.readline())
    ip = GetIP(file.readline())

    while ip != '':

        printcolour(ip, 'cy')

        snapexecpath = ('timeout 2 xvfb-run --auto-servernum --server-num=1 --server-args="-screen 0, 1280x1200x24" cutycapt --url="http://' + ip + ':' + port + '" ')
        snapexecthing = ('--javascript=on --out=/home/pi/Pen/8080Screens/' + ip + '.png --delay=1000')

        if debug == 1:
            printcolour(snapexecpath + snapexecthing, 'cy')

        takesnap = subprocess.Popen([snapexecpath + snapexecthing], shell=True, stderr=PIPE, stdout=PIPE, bufsize=1)
        takesnap.wait()

        ip = GetIP(file.readline())

    printcolour("No IP Found in the line, turning off..", 'r')

    file.close()

# ----------------------------------------------------------------------------------------------------------------------
# Main
# ----------------------------------------------------------------------------------------------------------------------

for arg in sys.argv:

    if arg.find('-web') != -1:
        web = True
    else:
        web = False
    if arg.find('/') != -1:
        scanfile = arg
        inputfound = 1
    if arg.find('-p') != -1:
        port = arg[2:]

    if debug:
        printcolour(arg, 'r')

printcolour('Scan File : ' + scanfile, 'cy')

if inputfound != 1:
    exit(2)

if web:
    webber()
else:
    vnc()

exit()
